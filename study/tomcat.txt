应用层http  传输层tcp 网络层ip 链路层mac

tcp keepalive 用于检测长时间空闲的连接是否仍然有效。TCP Keepalive 通过定期发送探测报文来检测连接状态。定期发送探测报文

http keepalive 复用同一个tcp连接，


http容器 Servlet容器
apache   tomcat


session:服务器端创建的一个会话对象，用于存储用户会话期间的数据。（没有大小限制）
cookie：存储客户端浏览器（大约4KB）

面向接口编程 Servlet 接口  如何知道由哪个 Servlet 来处理呢？Servlet 又是由谁来实例化呢？

Servlet 容器用来加载和管理业务类
                filter  interceptor

http-》servlet 容器-》servlet-》controller

前端控制器DispatcherServlet使用spring容器调用对应的bean处理请求
spring MVC容器在dispatcher的init方法创建，
spring 容器在web容器完成后创建

                        tomcat端口  监听端口
客户端--》apache tomcat（server--service（Connector））

Tomcat 要实现 2 个核心功能：

处理 Socket 连接，负责网络字节流与 Request 和 Response 对象的转化。-- 连接器（Connector）
加载和管理 Servlet，以及具体处理 Request 请求。 -- 容器（Container）

连接器用 ProtocolHandler 接口来封装通信协议和 I/O 模型的差异，ProtocolHandler 内部又分为 EndPoint 和 Processor 模块，EndPoint 负责底层 Socket 通信，Proccesor 负责应用层协议解析。连接器通过适配器 Adapter 调用容器。责任链模式
ProtocolHandler(EndPoint(底层Socket通信) 和 Processor（应用层协议解析））,EndPoint的acceptor通过线程池调用Processor，Processor通过适配器 Adapter 调用容器（servlet Container）


1.tomcat中的Servlet 容器是如何设计的呢？
答案：Tomcat 设计了 4 种容器，分别是 Engine(引擎)、Host(一个虚拟主机)、Context(一个 Web 应用程序,对应一个类加载器) 和 Wrapper(一个 Servlet)。这 4 种容器不是平行关系，而是父子关系。灵活性,用组合模式来管理这些容器的。
server包含多个service，一个Service最多只能有一个Engine, Engine管理多个Host, host包含多个context
Engine Pipeline(调用第一个vavle的invoke方法创建servlet和filter链，通过basic获取下层容器)、 Host Pipeline、 Context Pipeline、 Wrapper Pipeline

2.Tomcat如何实现一键式启停
答案：LifeCycle 接口。设计就是要找到系统的变化点和不变点
    1.不变点就是每个组件都要经历创建、初始化、启动  -- LifeCycle 接口，init()、start()、stop() 和 destroy()。组合模式，父组件调用子组件的方法。观察者模式，如果需要添加方法的逻辑，添加监听器。模板设计模式，LifeCycleBase 实现了 LifeCycle 接口
    2.变化点是每个具体组件的初始化方法，也就是启动方法是不一样的

3.怎么启动tomcat的
答案：1.startup.sh 脚本会启动一个 JVM 来运行 Tomcat 的启动类 Bootstrap。
    2.Bootstrap 初始化 Tomcat 的类加载器，并且创建 Catalina
    3.Catalina 是一个启动类，它通过解析 server.xml、创建相应的组件，并调用 Server 的 start 方法。
    4.Server 组件的职责就是管理 Service 组件，它会负责调用 Service 的 start 方法
    5.Service 组件的职责就是管理连接器和顶层容器 Engine，因此它会调用连接器和 Engine 的 start 方法。

4.jetty如何设计
答案：acceptor--》selectorManager--》数据就绪，拿到endpoint--》threadpool--》执行endpoint--》执行connection的回调函数--》生成request--》handler

5.Jetty 如何支持Servlet规范
答案：3 个组件：
    ContextHandler：管理 ServletHandler 和 SessionHandler。SecurityHandler 和 GzipHandler。将这些 Handler 构建成一个执行链
    ServletHandler：（Servlet、Filter和Listener的功能，依赖 FilterHolder、ServletHolder、ServletMapping、FilterMapping 这四大组件）
    SessionHandler：管理 Session

随机数熵源优化

6.jetty的Selector 编程
答案：常规的 NIO 编程思路是，将 I/O 事件的侦测和请求的处理分别用不同的线程处理。好处是它们互不干扰和阻塞对方。
  缺点：当 Selector 检测读就绪事件时，数据已经被拷贝到内核中的缓存了【重点！！！！！】，同时 CPU 的缓存中也有这些数据了，我们知道 CPU 本身的缓存比内存快多了，这时当应用程序去读取这些数据时，如果用另一个线程去读，很有可能这个读线程使用另一个  CPU核，而不是之前那个检测数据就绪的 CPU 核，这样 CPU 缓存中的数据就用不上了，并且线程切换也需要开销。
  解决方法：把 I/O 事件的生产和消费放到同一个线程来处理，如果这两个任务由同一个线程来执行，如果执行过程中线程不阻塞，操作系统会用同一个 CPU 核来执行这两个任务，这样就能利用 CPU 缓存了。
  ExecuteProduceConsume:任务的生产者（产生任务的线程）会自己执行任务，但如果当前线程因为执行任务而变得繁忙，它可能会创建一个新的线程来继续生产和执行任务。
  EatWhatYouKill：自适应的线程执行策略。
    1.空闲线程池：当线程池中有足够空闲线程时，EWYK 策略会采用 ExecuteProduceConsume（EPC）模式，即同一个线程既负责 IO 事件的侦测也负责处理这些事件。这样可以减少线程切换，充分利用 CPU 缓存，提高效率 
    2.繁忙线程池：当系统繁忙，线程池中的线程不足以处理所有任务时，EWYK 策略会切换成 ProduceExecuteConsume（PEC）模式。在这种模式下，IO 事件的侦测由专门的线程处理，而事件的处理则被提交到线程池中，由线程池中的其他线程来处理。这样做的目的是确保即使在高负载情况下，也有线程可用于侦测新的 IO 事件，避免因线程被业务代码阻塞而导致无法处理新的连接 


7.对象池技术
答案：适用于存活时间短，频繁创建，大对象。
  注意点：1.对象在用完后，需要调用对象池的方法将对象归还给对象池。    
         2.对象池中的对象在再次使用时需要重置，否则会产生脏对象，脏对象可能持有上次使用的引用，导致内存泄漏等问题，并且如果脏对象下一次使用时没有被清理，程序在运行过程中会发生意想不到的问题。
         3.对象一旦归还给对象池，使用者就不能对它做任何操作了。
         4.向对象池请求对象时有可能出现的阻塞、异常或者返回 null 值，这些都需要我们做一些额外的处理，来确保程序的正常运行。

8.tomcat,jetty高性能、高并发的设计
答案：I/O 和线程模型、减少系统调用、池化(内存换 CPU)、零拷贝(不做无用功，减少资源浪费)、高效的并发编程(缩小锁范围，锁设计内核态切换)。

9.系统如何实现阻塞和唤醒
答案：线程（task_struct）调用read函数，有用户态切换内核态，系统内核检测到Socket上的数据未就绪时，此时将task_struct从运行队列移到等待队列，触发一次CPU调度,进程会让出 CPU。
     当网卡数据到达时，内核将数据从内核空间拷贝到用户空间的 Buffer，接着将进程的task_struct结构体重新移到运行队列，这样进程就有机会重新获得 CPU 时间片，系统调用返回，CPU 又从内核态切换到用户态，访问用户空间的数据。


10.Tomcat如何实现热部署和热加载(区别：是否会清空session)
答案：通过ContainerBase 中的后台线程和 backgroundProcess 方法（engine，host，context，warpper）实现。
    1.【Context容器中实现】 热加载的实现方式是 Web 容器启动一个后台线程，定期检测类文件的变化，如果有变化，就重新加载类，在这个过程中不会清空 Session ，一般用在开发环境。
        -WebappLoader 周期性的检查 WEB-INF/classes 和 WEB-INF/lib 目录下的类文件是否有更新(重点：调用了 Context 容器的reload方法。
            1.停止和销毁 Context 容器及其所有子容器，子容器其实就是 Wrapper，也就是说 Wrapper 里面 Servlet 实例也被销毁了。
            2.停止和销毁 Context 容器关联的 Listener 和 Filter。
            3.停止和销毁 Context 下的 Pipeline 和各种 Valve。
            4.停止和销毁 Context 的类加载器，以及类加载器加载的类文件资源。
            5.启动 Context 容器，在这个过程中会重新创建前面四步被销毁的资源。)
        -Session 管理器周期性的检查是否有过期的 Session
        -周期性的检查静态资源是否有变化,否有更新
        -调用父类 ContainerBase 的 backgroundProcess 方法
    2.热部署原理类似，也是由后台线程定时检测 Web 应用的变化，但它会重新加载整个 Web 应用。这种方式会清空 Session，比热加载更加干净、彻底，一般用在生产环境。
     【通过监听器 HostConfig 来实现的】HostConfig 会检查 webapps 目录下的所有 Web 应用。
        -如果原来 Web 应用目录被删掉了，就把相应 Context 容器整个销毁掉。
        -是否有新的 Web 应用目录放进来了，或者有新的 WAR 包放进来了，就部署相应的 Web 应用。

11.为什么Host 容器不通过重写 backgroundProcess 方法来实现热部署呢？
答案：热部署涉及到检查 webapps 目录下的 Web 应用是否有变化，包括添加新的应用、更新现有应用或移除应用。这些操作通常涉及到更宏观层面的部署逻辑，而不是单个应用的类重新加载或资源文件的更新。


AppClassLoader --> ExtClassLoader --> BootstrapClassLoader
12.Tomcat 的类加载器，为什么打破双亲委派
答案：Tomcat 的自定义类加载器 WebAppClassLoader。先在Web 应用本地目录下查找要加载的类,没找到,用 ExtClassLoader 类加载器类加载,没找到，尝试用系统类加载器 (也就是 AppClassLoader) 来加载。
      目的是优先加载 Web 应用目录下的类。
    1.本地 Cache 查找该类是否已经加载过(WebAppClassLoader加载),没有则查找AppClassLoader是否加载过。
    2.让ExtClassLoader去加载,ExtClassLoader会让BootstrapClassLoader先去加载，
    3.让WebAppClassLoader加载
    4.AppClassLoader系统类加载器加载(Web 应用是通过Class.forName调用交给系统类加载器的)
    5.如果上述加载过程全部失败，抛出 ClassNotFound 异常。

13.为什么tomcat不先让AppClassLoader加载类
答案：1.类隔离：每个 Web 应用都有自己的 WebAppClassLoader，这样可以确保不同 Web 应用之间的类是隔离的，一个应用的类不会影响另一个应用。

14.Tomcat如何隔离Web应用
答案：CommonClassLoader（CatalinaClassloader、SharedClassLoader（WebAppClassLoader））
     1.WebAppClassLoader：每个context维护一个，加载应用目录下的类。
     2.SharedClassLoader：不同web应用之间共享类
     3.CatalinaClassloader：专门来加载 Tomcat 自身的类
     4.CommonClassLoader：Tomcat 和各 Web 应用之间共享的类

15.Spring 的加载问题
答案：Spring 作为共享的第三方 JAR 包，它本身是由 SharedClassLoader 来加载的，Spring 又要去加载业务类，按照前面那条规则，加载 Spring 的类加载器也会用来加载业务类，但是业务类在 Web 应用目录下，不在 SharedClassLoader 的加载路径下。
    解决方法：类加载器传递机制。类加载器保存在线程私有数据里，只要是同一个线程，一旦设置了线程上下文加载器，在线程后续执行过程中就能把这个类加载器取出来用。因此 Tomcat 为每个 Web 应用创建一个 WebAppClassLoarder 类加载器，并在启动 Web 应用的线程里设置线程上下文加载器，这样 Spring 在启动时就将线程上下文加载器取出来，用来加载 Bean。

16.Tomcat如何实现Servlet规范
答案：Wrapper 容器来管理 Servlet 的。Servlet的两个组件：Listener 和 Filter

Listener主要有两类事件：
  第一类是生命状态的变化【ServletContextAttributeListener】，比如 Context 容器启动和停止、Session 的创建和销毁。 -- 数组
  第二类是属性的变化【HttpSessionAttributeListener】，比如 Context 容器某个属性值变了、Session 的某个属性值变了以及新的请求来了等。-- CopyOnWriteArrayList

17.Context 容器分别用了 CopyOnWriteArrayList 和对象数组来存储两种不同的监听器，为什么要这样设计？
答案：属性值（Session创建、销毁）变化listener能动态配置，所以用CopyOnWriteArray。生命周期事件（容器初始化，容器销毁）listener，因为是单线程没有安全问题

18.Servlet 的异步(30s超时)
答案：1.使用req.startAsync()获取异步上下文，保存了请求和响应对象。Web 应用需要开启一个新线程来处理耗时的操作，处理完成后需要调用AsyncContext的complete方法
    1.startAsync方法后，Tomcat 的工作线程就直接结束回到线程池中。负责 flush 响应数据的是 CoyoteAdaptor，它还会销毁 Request 对象和 Response 对象，因此需要通过某种机制通知 CoyoteAdaptor。
        ProtocolHandler判断CoyoteAdaptor的service方法返回值如果当前请求是一个异步 Servlet 请求，它会把当前 Socket 的协议处理者 Processor 缓存起来，将 SocketWrapper 对象和相应的 Processor 存到一个 Map 数据结构里。
        通过 SocketWrapper 就能从 Map 里找到相应的 Processor接着处理。
    2.complete 方法。最重要的就是把响应数据发送到浏览器。调用CoyoteRequest的action方法，接着调用SocketWrapper 的processSocket方法，会创建 SocketProcessor 任务类(OPEN_READ),通过 Tomcat 线程池来处理。
        注意：OPEN_READ。通过这个参数，我们就能控制 SocketProcessor 的行为，因为我们不需要再把请求发送到容器进行处理，只需要向浏览器端发送数据，并且重新在这个 Socket 上监听新的请求就行了。

19.spring Boot支持多种 Web 容器
答案：WebServer接口，各种 Web 容器比如 Tomcat 和 Jetty 需要去实现这个接口。
    ServletWebServerFactory工厂：创建 Web 容器
    ServletContextInitializer:Web 容器启动时，Spring Boot会把所有实现了ServletContextInitializer接口的类收集起来，统一调它们的 onStartup 方法。
    WebServerFactoryCustomizer:支持对内嵌式 Web 容器的定制化

    ServletWebServerApplicationContext:重写 onRefresh 方法来创建内嵌式的 Web 容器

20.spring的设计模式
答案：简单工厂模式(由一个工厂类根据传入的参数创建对象):BeanFactory通过反射获取对象
    工厂方法模式(简单工厂模式的一种升级,一个工厂都只对应一个相应的对象,将逻辑放到具体工厂):FactoryBean
    单例模式:Bean 可以被定义为两种模式：Prototype（多例）和 Singleton（单例）\
    代理模式:AOP 采用的是动态代理,代理类的方法中设置拦截器,通过执行拦截器中的逻辑增强了代理方法的功能，从而实现 AOP。

21.通用模块之日志框架
答案：“门面日志”利用了设计模式中的门面模式思想。Tomcat 使用自身的 JULI 作为 Tomcat 内部的日志处理系统。JULI 的日志门面采用了 JCL；而 JULI 的具体实现是构建在 Java 原生的日志系统java.util.logging之上的
 Java 日志系统: 局限--每个 JVM 有一份日志的配置文件,不符合 Tomcat 多应用的场景
    Logger：用来记录日志的类。
    Handler：规定了日志的输出方式，如控制台输出、写入文件。
    Level：定义了日志的不同等级。
    Formatter：将日志信息格式化，比如纯文本、XML。

 JULI 重新实现了一些日志接口:
    LogFactory:使用了工厂模式来向外提供实例,通过 SeviceLoader 为 Log 提供自定义的实现版本，如果没有配置，就默认使用 DirectJDKLog。
    Handler:FileHandler(在特定位置写文件的工具类) 和 AsyncFileHandler(实现了异步的写操作,阻塞双端队列 LinkedBlockingDeque 来实现)
    Formatter:通过一个 format 方法将日志记录 LogRecord 转化成格式化的字符串。
        -OnlineFormatter：基本与 Java 自带的 SimpleFormatter 格式相同，不过把所有内容都写到了一行中。
        -VerbatimFormatter：只记录了日志信息，没有任何额外的信息。
        -JdkLoggerFormatter：格式化了一个轻量级的日志信息。
    日志配置:Tomcat 的日志配置文件为 Tomcat 文件夹下conf/logging.properties


22.Tomcat的Session管理机制解析
答案：1.Session 的管理是由 Web 容器来完成的，主要是对 Session 的创建和销毁，除此之外 Web 容器还需要将 Session 状态的变化通知给监听者。
     2.Session 管理还可以交给 Spring 来做，好处是与特定的 Web 容器解耦，Spring Session 的核心原理是通过 Filter 拦截 Servlet 请求，将标准的 ServletRequest 包装一下，换成 Spring 的 Request 对象，这样当我们调用 Request 对象的 getSession 方法时，Spring 在背后为我们创建和管理 Session
 
 Session 的创建： Context 容器内的一个 Manager(StandardManager)对象来管理 Session,ManagerBase默认实现，
                1.首先判断 Session 数量是不是到了最大值，最大 Session 数可以通过参数设置
                2.重用或者创建一个新的 Session 对象，请注意在 Tomcat 中就是 StandardSession
                3.初始化新 Session 的值
                4.将 Session 添加到 ConcurrentHashMap 中
                5.将创建时间添加到 LinkedList 中，并且把最先添加的时间移除,方便清理过期 Session

 Session 的清理:容器组件会开启一个 ContainerBackgroundProcessor 后台线程，调用自己以及子容器的 backgroundProcess 进行一些后台逻辑的处理。
                StandardManager 的 backgroundProcess 。
                // processExpiresFrequency 默认值为 6，而 backgroundProcess 默认每隔 10s 调用一次，也就是说除了任务执行的耗时，每隔 60s 执行一次
                count = (count + 1) % processExpiresFrequency;
                if (count == 0) // 默认每隔 60s 执行一次 Session 清理
                    {processExpires();}

 Session 事件通知：Session创建时会调用session.setId(id);
                    // 这里面完成了 HttpSessionListener 事件通知
                    if (notify) {
                        tellNew();
                    }
                    通过manager获取Context，context获取ApplicationLifecycleListeners实例，构造HttpSessionEvent(getSession())事件，
                    判断是否是 HttpSessionListener，调用sessionCreated方法触发 Session Created 事件


23.Cluster组件：Tomcat的集群通信原理(确保时钟同步)
答案：在集群中的多个节点之间保持数据的一致性。
    有两种方式，1.把所有 Session 数据放到一台服务器或者一个数据库中，集群中的所有节点通过访问这台 Session 服务器来获取数据。
               2。在集群中的节点间进行 Session 数据的同步拷贝。
                 1.将一个节点的 Session 拷贝到集群中其他所有节点；
                 2.只将一个节点上的 Session 数据拷贝到另一个备份节点。

24.tomcat集群原理，如何只将一个节点上的 Session 数据拷贝到另一个备份节点。
答案：Tomcat 是通过组播（Multicast）来实现。组播通信的过程是这样的：每一个 Tomcat 节点在启动时和运行时都会周期性（默认 500 毫秒）发送组播心跳包，同一个集群内的节点都在相同的组播地址和端口监听这些信息；在一定的时间内（默认   
    3秒）不发送组播报文的节点就会被认为已经崩溃了，会从集群中删去。因此通过组播，集群中每个成员都能维护一个集群成员列表。

    有了集群成员的列表，集群中的节点就能通过 TCP 连接向其他节点传输 Session 数据。Tomcat 通过 SimpleTcpCluster 类来进行会话复制（In-Memory Replication）。要开启集群功能，只需要将server.xml里的这一行的注释去掉就行。
    默认情况下 Session 管理组件 DeltaManager 会在节点之间拷贝 Session，DeltaManager 采用的一种 all-to-all 的工作方式，即集群中的节点会把 Session 数据向所有其他节点拷贝，而不管其他节点是否部署了当前应用。当集群节点数比较少时，比如少于 4 个，这种 all-to-all 的方式是不错的选择；但是当集群中的节点数量比较多时，数据拷贝的开销成指数级增长，这种情况下可以考虑 BackupManager，BackupManager 只向一个备份节点拷贝数据。

    ReplicationValve 可以用来过滤掉不需要复制的请求，从而减少不必要的网络流量和提高性能

25.tomcat集群的组件
答案：Engine（处理所有的请求和响应，包含一个Cluster元素，用于定义集群的属性）、
     Cluster（定义集群行为的元素，它可以包含多个子元素，如Manager、Channel、Valve等，管理集群中的节点，处理会话复制和负载均衡）、
     Manager（管理会话。在集群环境中，会话需要在多个节点之间共享，以确保用户在集群中的任何节点上都能保持会话状态，DeltaManager和BackupManager）、
     Channel（集群节点之间通信的通道。它负责在集群节点之间传递消息，如会话复制信息。）、
     Valve（Tomcat中的过滤器，可以用来处理请求和响应，在集群中，ReplicationValve可以用来设置请求过滤，以避免不必要的会话复制）、
     Load Balancer（负载均衡器（如Nginx、Apache HTTP Server的mod_jk模块）用于将请求分发到集群中的不同节点。它可以自动检测到停止的Tomcat实例，并停止将请求转发到这些实例。）、
     Sticky Session（粘性会话（Sticky Session）是一种负载均衡策略，它确保用户的请求总是被发送到同一个Tomcat实例。这通常通过在会话中存储一个标识符来实现，该标识符与特定的Tomcat实例关联。）、
     Membership（检测集群中的节点状态，确保所有节点都是活跃的，使用组播或单播来发现集群中的其他节点）、
     Receiver 和 Sender（用于节点间通信的组件）、
     JvmRoute（是一个属性，它为每个Tomcat实例提供了一个唯一的标识符。这个标识符可以用于会话复制和负载均衡。）

26.JVM GC原理及调优的基本思路
CMS 收集器将 Java 堆分为年轻代（Young）【幸存者空间（Survivor）和伊甸园空间（Eden）】或年老代（Old）
年轻代采用复制 - 整理算法
年老代采用标记 - 清理算法
优化：合理设置年轻代和年老代的大小，通过压测分析 GC 日志调整大小
    1.年轻代的内存使用率处在高位，导致频繁的 Minor GC，而频繁 GC 的效率又不高，说明对象没那么快能被回收，调大年轻代。
    2.年老代的内存使用率处在高位，导致频繁的 Full GC，这样分两种情况：
        如果每次 Full GC 后年老代的内存占用率没有下来，可以怀疑是内存泄漏；
        如果 Full GC 后年老代的内存占用率下来了，说明不是内存泄漏，我们要考虑调大年老代。

G1收集器有两大特点（关键的参数是-XX:MaxGCPauseMillis = n，限制最大的 GC 暂停时间）：
    1.G1 可以并发完成大部分 GC 的工作，这期间不会“Stop-The-World”。
    2.G1 使用非连续空间，这使 G1 能够有效地处理非常大的堆。此外，G1 可以同时收集年轻代和年老代。G1 并没有将 Java 堆分成三个空间（Eden、Survivor 和 Old），而是将堆分成许多（通常是几百个）非常小的区域。这些区域是固定大小的（默认情况下大约为  
        2MB）。每个区域都分配给一个空间


日志查看工具：GCViewer 


27.如何监控Tomcat的性能？
答案：监控 Tomcat 的各种指标，才能对 Tomcat 内部发生的事情一目了然，让我们明白系统的瓶颈在哪里，进而做出调优的决策。
    Tomcat 的关键指标有吞【吐量、响应时间、错误数】（最关心的业务指标）、线程池、CPU 以及 JVM 内存（系统资源有关，会影响前面的业务指标）。

    Tomcat 可以通过JMX（Java管理扩展）将上述指标暴露出来的
    1.通过Jconsole工具查看
    2.登陆到目标机器，通过命令行来查看各种指标。
        1.ps -ef | grep tomcat  拿到进程 ID
        2.cat /proc/<pid>/status 查看进程状态的大致信息
        3.top -p <pid>  监控进程的 CPU 和内存资源使用情况
        4.netstat -na | grep tomcat端口  查看 Tomcat 的网络连接
            netstat -na | grep ESTAB | grep tomcat端口 | wc -l  已连接状态的连接数
            netstat -na | grep TIME_WAIT | grep tomcat端口 | wc -l TIME_WAIT状态的连接数
        5.ifstat  查看网络流量，大致可以看出 Tomcat 当前的请求数和负载状况。

28.Tomcat I/O和线程池的并发调优
答案：Tomcat 的调优涉及 I/O 模型和线程池调优、JVM 内存调优以及网络优化
    Windows 平台：使用NIO.2，因为 Windows 从操作系统层面实现了真正意义上的异步 I/O，如果传输的数据量比较大，异步 I/O 的效果就能显现出来。
    Linux 平台：使用 NIO。因为 Linux 内核没有很完善地支持异步 I/O 模型，因此 JVM 并没有采用原生的 Linux 异步 I/O，而是在应用层面通过 epoll 模拟了异步 I/O 模型

    线程池：利特尔法则--系统中的请求数 = 请求的到达速率 × 每个请求处理时间
         计算密集型：线程池大小 = 每秒请求数 × 平均请求处理时间
         I/O密集型：线程阻塞就会让出 CPU，增加线程数量充分利用cpu。 线程池大小 = （线程 I/O 阻塞时间 + 线程 CPU 时间 ）/ 线程 CPU 时间

         使用上述公式需要满足一下条件：
            1.CPU 核数要足够，如果不够，会造成大量线程上下文切换
            2.


29.Tomcat内存溢出的原因分析及调优
答案：1.java.lang.OutOfMemoryError: Java heap space  原因：内存泄漏（无法被 GC 回收）、JVM参数指定的堆大小（加大堆的大小）、finalize方法的过度使用（不要给Java类定义finalize方法）
     2.java.lang.OutOfMemoryError: GC overhead limit exceeded  原因：Java 虚拟机（JVM）在花费了过多的时间（默认是超过 98% 的时间）来执行垃圾回收（GC），并且只回收了少量的堆内存空间。
        解决方案：查看 GC 日志或者生成 Heap Dump，确认一下是不是内存泄漏，如果不是内存泄漏可以考虑增加 Java 堆的大小;
     3.java.lang.OutOfMemoryError: Requested array size exceeds VM limit  原因:请求的数组大小超过 JVM 限制,通常这也是一个配置问题（JVM 堆太小）
     4.java.lang.OutOfMemoryError: MetaSpace  原因：JVM 的元空间用尽,在本地内存中分配,大小受参数 MaxMetaSpaceSize
        解决方案：加大 MaxMetaSpaceSize 参数的值
     5.java.lang.OutOfMemoryError: Request size bytes for reason. Out of swap space  原因：当本地堆内存分配失败或者本地内存快要耗尽时
        解决方案：根据生成“致命错误”日志文件诊断；或者使用操作系统提供的 DTrace 工具来跟踪系统调用
     6.java.lang.OutOfMemoryError: Unable to create native threads  原因：操作系统尝试创建一个新的 Native Thread（Java 线程），由于各种原因，操作系统创建新的线程可能会失败。
        1.内存大小限制（-Xss参数），启动时确定，JVM运行期间不会自动扩容
        2.ulimit 限制，使用ulimit -a查看各种资源的限制，其中的“max user processes”就是一个进程能创建的最大线程数
        3.参数sys.kernel.threads-max限制，这个参数限制操作系统全局的线程数。 cat /proc/sys/kernel/threads-max。调整参数方法在/etc/sysctl.conf配置文件中，加入sys.kernel.threads-max = 999999。
        4.参数sys.kernel.pid_max限制，系统全局的 PID 号数值的限制，每一个线程都有 ID，ID 的值超过这个数，线程就会创建失败。在/etc/sysctl.conf配置文件中，加入sys.kernel.pid_max = 999999。
        5.从程序找原因，看看是否真的需要这么多线程，有可能是程序的 Bug 导致创建过多的线程。

    分析工具java -verbose:gc -Xloggc:gc.log -XX:+PrintGCDetails -jar mem-0.0.1-SNAPSHOT.jar， verbosegc 参数对程序的影响比较小，因此很适合在生产环境现场使用（！！！！！！）。
    找到内存泄漏点，我们通过 jmap 工具生成 Heap Dump：用 Eclipse Memory Analyzer 打开 Dump 文件，通过内存泄漏分析

30.Tomcat拒绝连接原因分析及网络优化
答案： 1.java.net.SocketTimeoutException  连接超时和读取超时
      2.java.net.BindException: Address already in use: JVM_Bind 端口被占用。用netstat –an命令来查看端口占用
      3.java.net.ConnectException: Connection refused: connect 连接被拒绝,原因是指定 IP 地址的机器没有找到；或者是机器存在，但这个机器上没有开启指定的监听端口。
        解决办法是从客户端机器 ping 一下服务端 IP，假如 ping 不通，可以看看 IP 是不是写错了；假如能 ping 通，需要确认服务端的服务是不是崩溃了。
      4.java.net.SocketException: Socket is closed 连接已关闭,原因是通信的一方主动关闭了 Socket 连接（调用了 Socket 的 close 方法），接着又对 Socket 连接进行了读写操作，这时操作系统会报“Socket 连接已关闭”的错误。
        程序忘记检查套接字的状态或者在套接字关闭后仍然尝试使用它。
      5.java.net.SocketException: Connection reset/Connect reset by peer: Socket write error 连接被重置,对方主动关闭了连接，或者因为网络问题导致连接中断。这个异常通常与网络的不稳定性或者对方的行为(服务器重启)有关。
      6.java.net.SocketException: Broken pipe 通信管道已坏。 通信的一方在收到“Connect reset by peer: Socket write error”后，如果再继续写数据则会抛出 Broken pipe 异常，
      7.java.net.SocketException: Too many open files 指进程打开文件句柄数超过限制。并发用户数比较大时，服务器可能会报这个异常。这是因为每创建一个 Socket 连接就需要一个文件句柄，此外服务端程序在处理请求时可能也需要打开一些文件。
        解决方案：lsof -p pid命令查看进程打开了哪些文件,是不是有资源泄露，也就是说进程打开的这些文件本应该被关闭，但由于程序的 Bug 而没有被关闭。ulimit -a来查看系统目前资源限制，通过ulimit -n 10240修改最大文件数。
      
      Tomcat 两个比较关键的参数：maxConnections(Tomcat 在任意时刻接收和处理的最大连接数,阻塞IO（BIO），默认值是maxThreads的值；如果是非阻塞IO（NIO），默认值是10000), 
                               acceptCount(控制内核的 accept 队列的长度，超过这个长度时，内核会向客户端发送 RST)
        当maxConnections达到上限时，新的连接请求会被放入等待队列中，等待队列的大小由acceptCount决定。如果等待队列也满了，那么超出的连接请求将被拒绝。

31.Tomcat进程占用CPU过高怎么办？
答案：JVM 在峰值负载下的平均 CPU 利用率为 40％，如果 CPU 使用率飙到 80% 就可以被认为是不正常的。
    1.定位高 CPU 使用率的线程和代码
        1.使用top命令查看进程 ID 和cpu使用率
        2.top -H -p pid，用更精细化的 top 命令查看这个 Java 进程中各线程使用 CPU 的情况，找出线程在做什么事情
        3. jstack 命令生成线程快照 jstack pid
        4.如果jstack 的输出比较大，你可以将输出写入文件：jstack pid > pid.log
        5.打开 pid.log，定位到第 4 步中找到的名为“scheduling-1”的线程
    2.进一步分析上下文切换开销（如果第一步没找到）
        1.通过上述4继续观察其他线程，看pid.log日志找其他线程
        2.grep -o 'pool-1-thread' pid.log | wc -l，统计线程数量，如果线程数比较多，怀疑 CPU 的上下文切换开销
        3.vmstat 1 100， vmstat命令来查看一下操作系统层面的线程上下文切换活动
        4.观察cs（线程上下文切换次数），in（CPU 中断次数），两个数字非常高，CPU 的上下文切换开销

32.操作系统层面调优
1.TCP 缓冲区大小：发送和接收缓冲区最好加大到 16MB， 
 sysctl -w net.core.rmem_max = 16777216
 sysctl -w net.core.wmem_max = 16777216
 sysctl -w net.ipv4.tcp_rmem =“4096 87380 16777216”
 sysctl -w net.ipv4.tcp_wmem =“4096 16384 16777216”

2.TCP 队列大小:net.core.somaxconn控制 TCP 连接队列的大小，默认值为 128。 sysctl -w net.core.somaxconn = 4096
  net.core.netdev_max_backlog用来控制 Java 程序传入数据包队列的大小
    sysctl -w net.core.netdev_max_backlog = 16384  ：网卡接收但尚未被处理的队列中可以堆积的最大数据包数量
    sysctl -w net.ipv4.tcp_max_syn_backlog = 8192  ：SYN请求（半打开连接）的最大队列长度，处理更多的半打开连接，防止SYN洪水攻击和提高并发连接能力
    sysctl -w net.ipv4.tcp_syncookies = 1          ：SYN队列满了，服务器也可以通过发送一个特殊的cookie来响应SYN请求，从而减轻SYN洪水攻击的影响。会增加CPU的负担。
3.端口:Web 应用程序作为客户端向远程服务器建立了很多 TCP 连接，可能会出现 TCP 端口不足的情况。因此最好增加使用的端口范围，并允许在 TIME_WAIT 中重用套接字
    sysctl -w net.ipv4.ip_local_port_range =“1024 65535”
    sysctl -w net.ipv4.tcp_tw_recycle = 1
4.文件句柄数:高负载服务器的文件句柄数很容易耗尽,在/etc/security/limits.conf中为特定用户增加文件句柄数：
    用户名 hard nofile 40000
    用户名 soft nofile 40000
5.拥塞控制:推荐将拥塞控制算法设置为 cubic，
    sysctl -w net.ipv4.tcp_congestion_control = cubic
