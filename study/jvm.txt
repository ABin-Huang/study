jvm主要分为5部分：方法区，堆，虚拟机栈，本地方法栈，程序计数器

方法区(注意版本):主要的作用是存放类的元数据信息，常量和静态变量，即时编译代码等。
当它存储的信息过大时，会在无法满足内存分配时报错。

虚拟机栈(局部变量，动态链接，操作数栈，方法返回值)和虚拟机堆
一句话便是：栈管运行，堆管存储。则虚拟机栈负责运行代码，而虚拟机堆负责存储数据
（注：8种基本类型的变量+对象的引用变量+实例方法都是在栈里面分配内存。）

局部变量的复用：存放方法参数和方法内部所定义的局部变量。它的容量是以Slot为最小单位，
一个slot可以存放32位以内的数据类型。
当方法执行位置超过了某个变量，那么这个变量的slot可以被其它变量复用

堆内存中也会划分为年轻代和老年代，而非堆内存则为永久代。1.8前非堆内存为永久代。在1.8中已经移除永久代，替代品是一个元空间(MetaSpace)，
最大区别是metaSpace是不存在于JVM中的，它使用的是本地内存。并有两个参数

执行引擎：解释器，即时编译器（中间代码生成器，代码优化器，目标代码生成器），垃圾回收器

1.java文件编译成字节码文件
2.类加载器加载字节码文件（引导类，扩展类，系统类加载器），
3.链接阶段：验证，准备，解析
3.初始化阶段
4.通过jvm实现

2.1.1 加载
1.将class文件加载到内存
2.将静态数据结构转化成方法区中运行时的数据结构
3.在堆中生成一个代表这个类的 java.lang.Class对象作为数据访问的入口

2.1.2
1.验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查
2.准备：为static变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 
（注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），
实例变量是对象初始化时赋值的）
3.解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在
import java.util.ArrayList这就算符号引用，直接引用就是指针或者对象地址，
注意引用对象一定是在内存进行）


2.1.3初始化
初始化其实就是执行类构造器方法的<clinit>()的过程，而且要保证执行前父类的<clinit>()方法执行完毕。
这个方法由编译器收集，顺序执行所有类变量（static修饰的成员变量）显式初始化和静态代码块中语句。
此时准备阶段时的那个 static int a 由默认初始化的0变成了显式初始化的3。 
由于执行顺序缘故，初始化阶段类变量如果在静态代码块中又进行了更改，会覆盖类变量的显式初始化，
最终值会为静态代码块中的赋值。

注意：字节码文件中初始化方法有两种，
非静态资源初始化的<init>和静态资源初始化的<clinit>，类构造器方法<clinit>()不同于类的构造器，
这些方法都是字节码文件中只能给JVM识别的特殊方法

2.2类加载器的加载顺序
加载一个Class类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的
1.BootStrap ClassLoader：rt.jar
2.Extension ClassLoader: 加载扩展的jar包App 
3.ClassLoader：指定的classpath下面的jar包
4.Custom ClassLoader：自定义的类加载器

垃圾回收：
问题：如何判断一个对象可回收（辨别一个对象是存是亡）
1.引用计数法（某个对象的引用计数器为 0。额外的空间来存储计数器，以及繁琐的更新操作，并且不能解决循环引用问题，造成了内存泄露。）
2.可达性分析（将一系列 GC Roots 作为初始的存活对象合集（live set），然后从该合集出发，探索所有能够被该集合引用到的对象，
并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的）

问题：什么是 GC Roots 
暂时理解为由堆外指向堆内的引用，一般而言，GC Roots 包括（但不限于）如下几种：
1.Java 方法栈桢中的局部变量；
2.已加载类的静态变量；
3.JNI handles(Java虚拟机提供的机制，用于在Java代码和本地代码（如C/C++代码）之间传递和管理对Java对象的引用)；
4.已启动且未停止的 Java 线程。

问题：可达性分析在多线程环境下造成误报（将引用设置为 null）或者漏报（将引用设置为未被访问过的对象）
漏报则比较麻烦，因为垃圾回收器可能回收事实上仍被引用的对象内存。一旦从原引用访问已经被回收了的对象，则很有可能会直接导致 Java 虚拟机崩溃。
解决方法：防止在标记过程中堆栈的状态发生改变。Stop-the-world 以及安全点
Stop-the-world，停止其他非垃圾回收线程的工作，直到完成垃圾回收。这也就造成了垃圾回收所谓的暂停时间（GC pause）。
Java 虚拟机中的 Stop-the-world 是通过安全点（safepoint）机制来实现的。当 Java 虚拟机收到 Stop-the-world 请求，它便会等待所有的线程都到达安全点，
才允许请求 Stop-the-world 的线程进行独占的工作。
安全点(Java 虚拟机的堆栈不会发生改变的本地代码)--找到一个稳定的执行状态。在这个执行状态下，Java 虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。

问题：垃圾回收算法
1.标记清楚（造成内存碎片，可能导致无法分配连续的内存空间）
2.压缩（把存活的对象聚集到内存区域的起始位置，留下一段连续的内存空间。能够解决内存碎片化，代价是压缩算法的性能开销）
3.复制（内存区域分为两等分，用两个指针 from 和 to 来维护。解决内存碎片化的问题，但堆空间的使用效率极其低下）

垃圾收集器
新生代：
  serial:单线程， 和cms（标记整理）配合，复制算法
  parNew：多线程（其他和serial一样），和cms配合
  parallel ：

老年代：标记整理
  serial old：单线程
  parallel Scavenge:多线程，jdk8默认，适用
  cms（concurrent mark sweep）：并发，标记-清楚 jdk11废弃
    1.初始标记：标记GC Root直接关联对象，stop the world
    2.并发标记: 与用户线程同时运行（可达性分析）
    3.重新标记：stop the world（修正并发标记期间，程序导致对象发生变化，根据算法修复状态）
    4.并发清楚：与用户线程同时运行

G1（garbage）：动态垃圾收集策略，根据存活对象和空闲区域数量，动态决定收集区域和顺序①
  整体采用标记整理，局部采用复制算法，不会产生碎片
  整个java堆分为2048个region块
  新增humongous内存区域，存储大对象（超过1，5个region）
young GC：与其他收集器不同，不是新生代的eden满了才回收
   而是计算eden区回收大概多少时间（接近-XX:MaxGCPauseMills），触发GC
Mixed GC:多数对象晋升老年代时，为避免内存耗尽，触发GC，回收整个Young region
  和一部分old region（触发条件-XX:InitiatingHeapOccupancyParcent=n）
Full GC：单线程标记，清楚以及压缩整个堆的对象

-XX:ParallelGCThreads=n STW工作线程数 逻辑核数
-XX:ConGCThreads=n 并行标记线程 上面的1/4
-XX:InitiatingHeapOccupancyParcent=n mixGC触发阈值默认45%
-XX:G!HeapRegionSize=n 2048个区域 默认每个占1/2000，每个区域范围1MB-32MB
-XX:MaxGCPauseMills: 最大停顿时间（毫秒 默认200）
①成本排序案例（根据用户期望GC停止时间-XX:MaxGCPauseMills制定计划）
  区域1，2，3
  1预计回收1.5MB内存，耗时2MS，投产比=1.5/2
  2预计回收1MB内存，耗时1MS，投产比=1/1
  3预计回收0.5MB内存，耗时1MS，投产比=0.5/1 选择2进行回收

虚方法：invokeinnterface和invokevirtual，虚方法通常使用动态绑定，虚拟机需要根据调用者的类型决定目标方法，
这个过程叫动态绑定，静态绑定：invokespecial和invokestatic，还有使用final修饰的虚方法。 如何优化虚方法，
使用方法表，每个类生成一张方法表，快速定位目标方法。如何生成方法表：在类加载的准备阶段，除了为静态字段分配内存，
还会构造该类相关联的方法表。方法表是一个数组，数组元素存储非私有的实例方法，一，子类方法表中包含父类方法表中的所有方法；
二，子类方法在方法表中的索引值，与它所重写的父类方法的索引值相同。
方法表还算不上好的优化手段，另外两种：内联缓存和方法内联。

内联缓存（Java 虚拟机只采用单态内联缓存，只缓存了一种动态类型以及它所对应的目标方法。还有多态和超多态
在实践中，大部分的虚方法调用均是单态的，也就是只有一种动态类型。为了节省内存空间）：
加快动态绑定的技术。可以缓存调用者的类型以及目标方法。
执行过程中，如果碰到已缓存的类型，内联缓存便会直接调用该类型所对应的目标方法。
如果没有碰到已缓存的类型，内联缓存则会退化至使用基于方法表的动态绑定。

内联缓存失效：
在最坏情况下，我们用两种不同类型的调用者，轮流执行该方法调用，那么每次进行方法调用都将替换内联缓存。
也就是说，只有写缓存的额外开销，而没有用缓存的性能提升。
另外一种选择则是劣化为超多态状态。这也是 Java 虚拟机的具体实现方式。处于这种状态下的内联缓存，
实际上放弃了优化的机会。它将直接访问方法表，来动态绑定目标方法。与替换内联缓存纪录的做法相比，
它牺牲了优化的机会，但是节省了写缓存的额外开销。

JVM反射
问题：如何反射：先通过Class.forName获得类，Class.getMethod获取方法，Method.invoke调用目标方法。
性能消耗主要为Method.invoke方法。Method.invoke（methodName，Object[]）有两种实现：
1.本地实现（用的C++代码，C++代码里面再调用至Java代码），
2。动态实现（Java代码，调用超过 15 次之后,Inflation机制）
方法的反射调用会带来不少性能开销，原因主要有三个：变长参数方法导致的 Object 数组，基本类型的自动装箱、拆箱，
还有最重要的方法内联（方法句柄的调用和反射调用一样，都是间接调用，同样会面临无法内联的问题）。

问题：JVM调用方法的指令有哪些
方法的调用指令有：invokeStatic，invokeSpecial，invokeVirtual，invokeInterface。还有invokeDynamic
这些指令在设计上是面向静态绑定的
问题：为什么还需要invokedynamic指令呢？
主要目的是为了支持动态语言、函数式编程以及其他需要在运行时进行方法绑定和代码生成的场景
如Lambda表达式，动态代理，
动态语言中，方法调用通常是在运行时决定的，而不是在编译时确定的。
invokedynamic提供了一种更灵活的方法绑定机制，使得Java虚拟机能够更好地支持动态语言，
如Groovy、JRuby等。

问题：invokeDynamic的底层机制
Java 7 引入了更加底层、更加灵活的方法抽象 ：方法句柄（MethodHandle）
方法句柄的类型（MethodType）是由所指向方法的参数类型以及返回类型组成的。
它是用来确认方法句柄是否适配的唯一关键。当使用方法句柄时，
我们其实并不关心方法句柄所指向方法的类名或者方法名。
调用方法句柄，和原本对应的调用指令是一致的。也就是说，
对于原本用 invokevirtual 调用的方法句柄，它也会采用动态绑定；
而对于原本用 invokespecial 调用的方法句柄，它会采用静态绑定。
权限检查是在句柄的创建阶段完成的。

问题：invokeDynamic重要点
1.调用点（CallSite）2.方法句柄3.方法句柄的类型（参数类型和返回致类型决定）
方法句柄类型：MethodType methodType = MethodType.methodType(returnType, parameterTypes);
方法句柄：MethodHandles.Lookup lookup = MethodHandles.lookup();
MethodHandle methodHandle = lookup.findVirtual(receiverClass, methodName, methodType);

问题：JVM对象的内存布局（64位虚拟机）
每个 Java 对象都有一个对象头。由标记字段（64 位）和类型指针（64 位）所构成。
标记字段用以存储 Java 虚拟机有关该对象的运行数据，如哈希码、GC 信息以及锁信息。
类型指针则指向该对象的类。
举例：Integer 类为例，它仅有一个 int 类型的私有字段，占 4 个字节。因此，每一个 Integer 对象的额外内存开销至少是 400%。这也是为什么 Java 要引入基本类型的原因之一。

问题：怎么优化Java 对象头内存使用
64 位 Java 虚拟机引入了压缩指针，将堆中原本 64 位的 Java 对象指针压缩成 32 位的。

问题：压缩指针是什么原理呢
通过对对象指针进行压缩，使用更少的内存空间来表示相同的对象引用。
Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数。如果一个对象用不到 8N 个字节，那么空白的那部分空间就浪费掉了。这些浪费掉的空间我们称之为对象间的填充。
内存对齐的原因：1.方便寻址。2.让字段只出现在同一 CPU 的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段

问题：对象内存布局另一个有趣的特性--字段重排列
Java 虚拟机重新分配字段的先后顺序，以达到内存对齐的目的

现象：大部分的 Java 对象只存活一小段时间，而存活下来的小部分 Java 对象则会存活很长一段时间。
得出想法：Java 虚拟机的分代回收思想（将堆空间划分为两代，分别叫做新生代和老年代。新生代用来存储新建的对象。当对象存活时间够长时，则将其移动到老年代。）

问题：Minor GC （新生代）时，用了标记 - 复制算法，将 Survivor 区中的老存活对象晋升到老年代，剩下的存活对象和 Eden 区的存活对象复制到另一个 Survivor（from，to）
若老年代的对象可能引用新生代的对象，在标记存活对象的时，需要扫描老年代中的对象

问题：什么是JAVA内存模型
一是运行时数据区--主内存，线程工作内存
二是定义了一组内存访问规则。--线程内的happens-before规则，线程之间的happens-before规则
happens-before 关系是用来描述两个操作的内存可见性的
底层实现：通过内存屏障（memory barrier）来禁止重排序的。写操作之前插入写内存屏障，读操作之后插入读内存屏障

问题：为什么要用java内存模式
解决多线程模式下，数据竞争的干扰导致结果错误。解决方法由final，volatile，synchronized 和显示锁 
强制刷新缓存（工作内存同步主内存，同时会无效化其他处理器指向同一内存地址的缓存行），使得当前线程所修改的内存对其他线程可见。

问题：java内存模型的原理
Java 内存模型是通过内存屏障来禁止重排序的。
对于即时编译器来说，内存屏障将限制它所能做的重排序优化。
对于处理器来说，内存屏障会导致缓存的刷新操作。