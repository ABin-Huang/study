==========LSM==================
降低读性能，提高写性能，利用磁盘顺序读写，数据会有冗余，写入数据会比真正数据大

三种数据结构
1.MemTable【内存，根据key排序】
2.Immutable MemTable【MemTable到达一定大小后生成，是SSTable的中间态】
3.SSTable(Sorted String Table)【有序键值对集合，在磁盘中。建立key索引及布隆过滤器】

LSM树原理把一棵大树拆分成N棵小树，它首先写入内存中，
随着小树越来越大，内存中的小树会flush到磁盘中，磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能。

写入原理
C0层是内存，每层有多个SSTable
1.追加到写前日志（write Ahead Log）并更新数据结构，写入到C0层
2.当C0层数据到达一定大小，将C0和C1合并（过程叫归并排序的合并）
3.合并后的新的C1会顺序写入磁盘，替换原来的C1
4.当C1层到达一定大小，继续和下层合并，删除并替换

查询流程
1.最新数据在C0层，最老数据在Cn层
2.先查C0层，若无，查C1，逐层往下查

===========B-Tree========

B-Tree
将磁盘看成固定大小的页，页是读写的最小单元【在新增或删除，页可能存放不下，造成页分裂和页合并】
方便使用锁，直接在树上加锁，LSM需修改数据结构（其他可能）


concurrentHashMap
分段+synchronized+cas