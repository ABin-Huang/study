粘包拆包解决方案
1.消息长度固定：发送端在发送数据前，将数据按照固定长度进行分割，
并在接收端按照相同的长度进行接收和解析。这种方法适用于消息长度固定的情况，
但对于长度不固定的数据就不适用。

2.分隔符：发送端在每个数据包的末尾添加特定的分隔符，接收端根据分隔符来切分数据包。
常见的分隔符可以是换行符、制表符等。这种方法适用于数据包之间有明确分隔符的情况。

3.消息头部包含长度信息：发送端在每个数据包的头部添加表示数据长度的字段，
接收端首先读取这个长度字段，然后根据长度读取对应长度的数据。
这样接收端就能够准确地知道每个数据包的长度。

4.应用层协议设计：在应用层上设计自定义的协议，用于在数据包中包含必要的信息，
如消息长度、消息类型等。接收端按照协议规定的格式解析数据。

5.使用专门的库或工具：有些编程语言或框架提供了解决TCP粘包问题的库或工具，
例如Netty、Twisted等。这些库通常提供了对TCP粘包的处理和解决方案，可以简化开发者的工作。


redis发布订阅模式：可以发送给所有客户端（广播）

多端数据同步方案：
1.轮询拉取（空轮询）
2.业务回调（全量拉取）
3.tcp通知（发送其他设备，更新数据）


消息存储结构
1：单聊（写扩散  写两份数据）
from_id to_id own_id msg   select * from to_id = B and own_id = A
A           B       A          你好
A           B       B	   你好
B           A       B   	   你好。
B           A       A	   你好。

改进
分布式id， from_id， to_id， own_id 两份
分布式id，msg（一份）


2：群聊（读扩散 ） group_id own_id
分布式id，group_id， own_id，msg
1                 1               2             你好
2                 1               3             你好。
