1.RPC怎么选择序列化协议
答案：性能、通用性（某个类型为集合类不能解析，跨平台，跨语言）和兼容性（升级版本后序列化异常）【两点重要】、
占用空间大小（传输数据小，传输速度快，带宽占用少）、安全性【最重要，JDK 原生序列化就存在漏洞】
安全性>通用性>兼容性>性能>效率>空间开销>易于理解>可读性
选择：Hessian（方便，对象兼容性好）和Protobuf（高效，通用性好）
使用方式：1.对象构造复杂，避免多层嵌套，这会使得序列化和反序列化浪费性能，且出现问题概率高。
2.对象过于庞大，比如为一个大 List 或者大 Map，序列化之后字节长度达到了上兆字节，会直接影响请求耗时
3.尽量使用编程语言原生对象，避免使用第三方集合类
4.对象有复杂的继承关系，当有继承关系时，会不停地寻找父类，遍历属性。对象关系越复杂，就越浪费性能，同时又很容易出现序列化上的问题

多路复用
1.select
2.epoll
3.poll

零拷贝有两种解决方式
1.mmap+write  通过虚拟内存
2.sendfile

2.RPC是解决进程间通信的一种方式
网络通信是两台机器之间网络IO操作，涉及网络IO模型。
网络 IO 模型分为四种：
1.同步阻塞IO（BIO）、2.同步非阻塞IO（NIO）、3.IO多路复用 4.异步非阻塞IO（AIO）


怎么设计好RPC？
答案：1.传输模块，协议模块，bootstrap，集群模块、插件化（可扩展）

超大规模集群服务注册选择AP还是CP？
答案：RPC 框架的服务发现，在服务节点刚上线时，服务调用方是可以容忍在一段时间之后（比如几秒钟之后）发现这个新上线的节点的。
  毕竟服务节点刚上线之后的几秒内，甚至更长的一段时间内没有接收到请求流量，对整个服务集群是没有什么影响的，所以我们可以牺牲掉 CP（强制一致性），
  而选择 AP（最终一致），来换取整个注册中心集群的性能和稳定性。

为什么选择基于消息总线的最终一致性的注册中心（AP）
答案：因为要求最终一致性，我们可以考虑采用消息总线机制。注册数据可以全量缓存在每个注册中心内存中，通过消息总线来同步数据。
  当有一个注册中心节点接收到服务节点注册时，会产生一个消息推送给消息总线，再通过消息总线通知给其它注册中心节点更新数据并进行服务下发，从而达到注册中心间数据最终一致性

管理好集群需要设计好服务发现，怎么做呢？
1.使用DNS（服务下线，不能及时摘除服务节点。服务扩容，上线的服务节点不能及时接收到流量。因为DNS 采取了多级缓存机制），DNS+负载均衡设备（多一次网络，需要手动增删服务节点）
2.使用Zookeeper（当连接到 ZooKeeper 的节点数量特别多，对 ZooKeeper 读写特别频繁，且 ZooKeeper 存储的目录达到一定数量的时候，ZooKeeper 将不再稳定，CPU 持续升高，最终宕机。因为zookeeper强一致性，集群性能上的下降）
3.基于消息总线的最终一致性的注册中心

怎么保证选择的服务节点是健康的？
答案:1.通过服务的健康检测，将不健康的节点标记为亚健康或者死亡状态，每次返回健康状态的节点，尽可能保证提供节点服务的稳定性。
2.判断服务健康的维度：心跳、可用率（某一个时间窗口接口调用成功次数的百分比=成功次数 / 总调用次数）
3.在端口连通正常的情况下，应用也可能僵死了。让每个应用实例提供一个“健康检测”的 URL，检测程序定时通过构造 HTTP 请求访问该 URL，然后根据响应结果来进行存活判断，这样就可以防止僵死状态的误判。
4.注册中心所在的机器和目标机器之间的网络可能还会出现故障，会误判。把检测程序部署在多个机器里面，分布在不同的机架，甚至不同的机房。因为网络同时故障的概率非常低。


路由（核心思想是让请求按照我们设定的规则发送到目标节点上，从而实现流量隔离的效果。）
答案： IP 路由策略、参数路由。通过路由功能完成像定点调用、黑白名单等一些高级服务治理功能

如何优雅关闭服务
答案：1.提供方维护订阅者列表，主动通知该节点下线
2.Runtime.addShutdownHook 方法，注册关闭钩子，并在里面添加了两个处理程序，一个负责开启关闭标识，一个负责安全关闭服务对象。
同时需要在我们调用链里面加上挡板处理器，当新的请求来的时候，会判断关闭标识，如果正在关闭，则抛出特定异常。
计数器统计当前请求数，但考虑到有些业务请求可能处理时间长，或者存在被挂住的情况，为了避免一直等待造成应用无法正常退出，我们可以在整个 ShutdownHook 里面，
  加上超时时间控制。

如何实现启动预热
答案：1.在负载均衡中，注册中心获取服务提供方的注册时间（或启动时间），在某段时间内给予设定权重相对更低的值，当超过这段时间慢慢增加到服务提供方设定的固定值。
2.在服务注册到注册中心前，预留一个 Hook 过程，让用户可以实现可扩展的 Hook 逻辑。用户可以在 Hook 里面模拟调用逻辑，从而使 JVM 指令能够预热起来，并且用户也可以在 Hook 里面事先预加载一些资源，只有等所有的资源都加载完成后，最后才把接口注册到注册中心。

如何大批量重启服务提供方
答案：1.分批重启!!!
2.如果必须同时大批量重启，为了保证服务的可用性，可以在低峰时期，限流，为PLUS服务，非PLUS的就提醒暂时不可用之类的友好提示。
3.在请求低峰，在热点的应用肯定是有使用低峰的!!!

如何建立可靠的安全体系
答案：1. 鉴权可以用 token 的方式，token鉴权应该是目前用的最多的一种认证方式
2. 授权可以用 RBAC 方式，类似k8s里面的 serviceAccount 和 role 和 roleBinding 等等

分布式环境下怎么定位问题
答案：1.借助合理封装的异常信息(比如是哪类异常引起的问题（如序列化问题或网络超时问题），是调用端还是服务端出现的异常，调用端与服务端的 IP 是什么，以及服务接口与服务分组都是什么等等。)
2.借助分布式链路跟踪
